version: '3.8'

services:
  # Web server for HTTP/HTTPS testing
  web-server:
    image: nginx:alpine
    container_name: web-server
    ports:
      - "8080:80"
      - "8443:443"
    networks:
      - frontend
      - backend
    volumes:
      - ./02-protocols/http-https/html:/usr/share/nginx/html
      - ./02-protocols/http-https/nginx.conf:/etc/nginx/nginx.conf

  # Database server for multi-tier testing
  database:
    image: postgres:15-alpine
    container_name: database
    environment:
      POSTGRES_DB: network_test
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: testpass
    networks:
      - backend
    ports:
      - "5432:5432"

  # DNS server for DNS testing
  dns-server:
    image: andyshinn/dnsmasq:2.80
    container_name: dns-server
    ports:
      - "53:53/udp"
      - "53:53/tcp"
    networks:
      - frontend
    volumes:
      - ./02-protocols/dns/dnsmasq.conf:/etc/dnsmasq.conf
      - ./02-protocols/dns/hosts:/etc/hosts

  # Load balancer for advanced testing
  load-balancer:
    image: nginx:alpine
    container_name: load-balancer
    ports:
      - "80:80"
      - "443:443"
    networks:
      - frontend
      - backend
    volumes:
      - ./06-advanced/load-balancing/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - web-server

  # Network monitoring container
  monitoring:
    image: prom/prometheus:latest
    container_name: monitoring
    ports:
      - "9090:9090"
    networks:
      - frontend
      - backend
    volumes:
      - ./06-advanced/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml

  # Client container for testing
  client:
    image: alpine:latest
    container_name: client
    networks:
      - frontend
    command: tail -f /dev/null
    volumes:
      - ./tools:/tools

  # Router simulation (using Linux routing)
  router:
    image: alpine:latest
    container_name: router
    privileged: true
    networks:
      - frontend
      - backend
    command: |
      sh -c "
        echo 'net.ipv4.ip_forward=1' >> /etc/sysctl.conf &&
        sysctl -p &&
        tail -f /dev/null
      "

networks:
  frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  backend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
